package forest;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;

import javax.swing.JPanel;

public class ForestView extends JPanel{

	/**
	 * 情報を握っているforestModelのインスタンスを束縛する。
	 * 束縛されるforestModelのインスタンスはpicture()というメッセージに応答できなければならない。
	 * 良好（2010年7月25日）
	 */
	protected ForestModel forestModel;

	/**
	 * 制御を司るforestControllerのインスタンスを束縛する。
	 * 良好（2010年7月25日）
	 */
	protected ForestController forestController;

	/**
	 * スクロール量としてPointのインスタンスを束縛する。
	 * 良好（2010年7月25日）
	 */
	private Point offset;

	private Integer leafAmount;

	/**
	 * インスタンスを生成して応答する。
	 * 指定されたモデルの依存物となり、コントローラを作り、モデルとビューを設定し、スクロール量を(0, 0)に設定する。
	 * @param aModel このビューのモデル
	 * 良好（2010年7月25日）
	 * 修正（2015年2月9日）
	 */
	public ForestView(ForestModel aforestModel)
	{
		super();
		forestModel = aforestModel;
		forestModel.addDependent(this);
		forestController = new ForestController();
		forestController.setForestModel(forestModel);
		forestController.setForestView(this);
		offset = new Point(0, 0);
		leafAmount = new Integer(0);
		return;
	}

	/**
	 * インスタンスを生成して応答する。
	 * 指定されたモデルの依存物となり、指定されたコントローラにモデルとビューを設定し、スクロール量を(0, 0)に設定する。
	 * @param aforestModel このビューのモデル
	 * @param aforestController このビューのコントローラ
	 * 良好（2010年7月25日）
	 * 修正（2015年2月9日）
	 */
	public ForestView(ForestModel aForestModel, ForestController aforestController)
	{
		super();
		forestModel = aForestModel;
		forestModel.addDependent(this);
		forestController = aforestController;
		forestController.setForestModel(forestModel);
		forestController.setForestView(this);
		offset = new Point(0, 0);
		leafAmount = new Integer(0);
		return;
	}

	/**
	 * 指定されたグラフィクスに背景色（明灰色）でビュー全体を塗り、その後にモデルの内容物を描画する。
	 * それはスクロール量（offset）を考慮してモデル画像（picture）をペイン（パネル）内に描画することである。
	 * @param aGraphics グラフィックス・コンテキスト
	 * 良好（2010年7月25日）
	 */
	public void paintComponent(Graphics aGraphics)
	{
		int width = this.getWidth();
		int height = this.getHeight();
		aGraphics.setColor(Color.WHITE);
		aGraphics.fillRect(0, 0, width, height);
		if (forestModel == null) { return; }
		aGraphics.setColor(Color.RED);
		aGraphics.drawRect(300- offset.x,300- offset.y,30,30);
		//aGraphics.drawString("aho",300- offset.x,300- offset.y);

		displayForest(aGraphics);

		return;
	}

	public void displayForest(Graphics aGraphics){
		for(int i = 0; i< forestModel.getNodes().size();i++){
			//根ノードを
			if(forestModel.getNodes().get(i).getParents().size() == 0){
				searchChildrenNodes(aGraphics,forestModel.getNodes().get(i),50);
			}
		}
	}

	public void searchChildrenNodes(Graphics aGraphics,Node node,int distanceX){

		int width = node.getName().length()+10;
		int height = 15;
		distanceX = distanceX + width + 50;

		if(node.getChildren().size() == 0){  setLeafAmount(getLeafAmount()+1);}

		int leaf = getLeafAmount()*20;
		//ノードを表示
		displayNode(aGraphics,node,distanceX,leaf,width,height);
		//子ノードを探索
		for (int index = 0 ; index < node.getChildren().size() ; index++)
		{
			searchChildrenNodes(aGraphics,node.getChildren().get(index),distanceX);
		}
	}

	public void displayNode(Graphics aGraphics,Node node,Integer x,Integer y,Integer width,Integer height){
		Font font1 = new Font("Arial",Font.PLAIN,12);
		aGraphics.setFont(font1);
		aGraphics.setColor(Color.BLACK);
		aGraphics.drawString(node.getName(),x,y);
		aGraphics.drawRect(x,y-height,width,height);
	}

	/**
	 * スクロール量（offsetの逆向きの大きさ）を応答する。
	 * @return X軸とY軸のスクロール量を表す座標
	 * 良好（2010年7月25日）
	 * 修正（2015年2月9日）
	 */
	public Point scrollAmount()
	{
		int x = 0 - offset.x;
		int y = 0 - offset.y;
		return (new Point(x, y));
	}

	/**
	 * スクロール量を指定された座標分だけ相対スクロールする。
	 * @param aPoint X軸とY軸のスクロール量を表す座標
	 * 良好（2010年7月25日）
	 * 修正（2015年2月9日）
	 */
	public void scrollBy(Point aPoint)
	{
		int x = offset.x + aPoint.x;
		int y = offset.y + aPoint.y;
		this.scrollTo(new Point(x, y));
		return;
	}

	/**
	 * スクロール量を指定された座標に設定（絶対スクロール）する。
	 * @param aPoint X軸とY軸の絶対スクロール量を表す座標
	 * 良好（2010年7月25日）
	 * 修正（2015年2月9日）
	 */
	public void scrollTo(Point aPoint)
	{
		offset = aPoint;
		return;
	}

	/**
	 * このインスタンスを文字列にして応答する。
	 * @return 自分自身を表す文字列
	 * 良好（2010年7月25日）
	 */
	public String toString()
	{
		StringBuffer aBuffer = new StringBuffer();
		Class<?> aClass = this.getClass();
		aBuffer.append(aClass.getName());
		aBuffer.append("[forestModel=");
		aBuffer.append(forestModel);
		aBuffer.append(",offset=");
		aBuffer.append(offset);
		aBuffer.append("]");
		return aBuffer.toString();
	}

	/**
	 * ビューの全領域を再描画する。
	 * 良好（2010年7月25日）
	 */
	public void update()
	{
		this.repaint(0, 0, this.getWidth(), this.getHeight());
		return;
	}

	public Integer getLeafAmount() {
		return leafAmount;
	}

	public void setLeafAmount(Integer leafAmount) {
		this.leafAmount = leafAmount;
	}

}
